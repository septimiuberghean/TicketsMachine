
  </circuit>
  <vhdl name="memory_money">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
--use ieee.std_logic_unsigned;
--use ieee.std_logic_arith.all;

entity memory_money is
    port (
        button    : in  std_logic;
        mode      : in  std_logic;-- mode e 0-&gt; admin
        					    -- mode e 1-&gt; user
        we        : in  std_logic;
        addr      : in  std_logic_vector(2 downto 0);
        unu       : in  std_logic_vector(6 downto 0);
        doi       : in  std_logic_vector(6 downto 0);
        cinci     : in  std_logic_vector(6 downto 0);
        zece      : in  std_logic_vector(6 downto 0);
        dzeci     : in  std_logic_vector(6 downto 0);
        czeci     : in  std_logic_vector(6 downto 0);
        din       : in  std_logic_vector(7 downto 0);
        ok        : in  std_logic;
        unu_out   : out std_logic_vector(7 downto 0);
        doi_out   : out std_logic_vector(7 downto 0);
        cinci_out : out std_logic_vector(7 downto 0);
        zece_out  : out std_logic_vector(7 downto 0);
        dzeci_out : out std_logic_vector(7 downto 0);
        czeci_out : out std_logic_vector(7 downto 0);
        dout      : out std_logic_vector(7 downto 0);
        error     : out std_logic
    );
end entity memory_money;

architecture rtl of memory_money is
    type memory_array is array (0 to 5) of std_logic_vector(7 downto 0);
    signal memory : memory_array := (others =&gt; "00000000");
begin

    process(button,ok)
    variable flag : std_logic;
    begin
        if rising_edge(button) then
                if mode = '0'  then
                    if we = '1' then
                        memory(to_integer(unsigned(addr))) &lt;= din;
                    else
                        dout &lt;= memory(to_integer(unsigned(addr)));
                     end if;
                elsif mode= '1' then
                if unsigned(memory(0)) &gt;= unsigned(unu) then
                    memory(0) &lt;= std_logic_vector(unsigned(memory(0)) - unsigned(unu));
                else
                    flag := '1';
                end if;
                if unsigned(memory(1)) &gt;= unsigned(doi) and flag /='1' then
                    memory(1) &lt;= std_logic_vector(unsigned(memory(1)) - unsigned(doi));
                 else
                    flag := '1';
                end if;
                if unsigned(memory(2)) &gt;= unsigned(cinci) and flag /='1' then
                    memory(2) &lt;= std_logic_vector(unsigned(memory(2)) - unsigned(cinci));
                else
                    flag := '1';
                end if;
                if unsigned(memory(3)) &gt;= unsigned(zece) and flag /='1'  then
                    memory(3) &lt;= std_logic_vector(unsigned(memory(3)) - unsigned(zece));        
                else
                    flag := '1';
                end if;
                if unsigned(memory(4)) &gt;= unsigned(dzeci) and flag /='1' then
                    memory(4) &lt;= std_logic_vector(unsigned(memory(4)) - unsigned(dzeci));
                else
                    flag := '1';
                end if; 
                if unsigned(memory(5)) &gt;= unsigned(czeci) and flag /='1' then
                    memory(5) &lt;= std_logic_vector(unsigned(memory(5)) - unsigned(czeci));
                else
                    flag := '1';
                end if;
            end if;
            if flag ='1' then
            	error &lt;= '1';
            else
            	error &lt;= '0';
            end if;
            unu_out &lt;= memory(0);
            doi_out &lt;= memory(1);
            cinci_out &lt;= memory(2);
            zece_out &lt;= memory(3);
            dzeci_out &lt;= memory(4);
            czeci_out &lt;= memory(5);
        end if;
    end process;

end rtl;
</vhdl>
  <vhdl name="calculate_cost">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity calculate_cost is
    port (
        button   : in  std_logic;
        data_in  : in  std_logic_vector(5 downto 0);
        data_out : out std_logic_vector(6 downto 0);
        error    : out std_logic
    );
end entity calculate_cost;

architecture rtl of calculate_cost is
    signal shift_reg : std_logic_vector(6 downto 0);
begin
    process(button)
    begin
        if rising_edge(button) then
            if (to_integer(unsigned(data_in)) &lt;= 50) then
                shift_reg &lt;= data_in &amp; '0';  -- Shift left and insert new data at the end
                error &lt;= '0';  -- Reset the error signal
            else
                shift_reg &lt;= (others =&gt; '0');  -- Set shift_reg to 0 when data_in &gt; 50
                error &lt;= '1';  -- Set the error signal to 1
            end if;
        end if;
    end process;

    data_out &lt;= shift_reg;
end architecture rtl;</vhdl>
  <vhdl name="segment_7">LIBRARY ieee;
USE ieee.std_logic_1164.all;
					  
ENTITY segment_7 IS
							
  PORT (
     val           : IN  std_logic_vector(3 DOWNTO 0);
  	a_b_c_d_e_f_g : OUT std_logic_vector(6 downTO 0)
    );
END segment_7;
--   a
--f     b
--   g
--e     c
--   d
--
--
ARCHITECTURE TypeArchitecture OF segment_7 IS

BEGIN
		a_b_c_d_e_f_g &lt;= "0000001" when val = x"0" else
				       "1001111" when val = x"1" else
				       "0010010" when val = x"2" else
				       "0000110" when val = x"3" else
				       "1001100" when val = x"4" else
				       "0100100" when val = x"5" else
				       "0100000" when val = x"6" else
				       "0001111" when val = x"7" else
				       "0000000" when val = x"8" else
				       "0000100" when val = x"9" else
				       "0001000" when val = x"A" else
				       "1100000" when val = x"b" else
				       "1110010" when val = x"c" else
				       "1000010" when val = x"d" else
				       "0110000" when val = x"E" else
				       "0111000" when val = x"F" ;	-- toate segmentele stinse
				       		

END TypeArchitecture;</vhdl>
  <vhdl name="number_splitter">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity number_splitter is
  port (
    num_in : in std_logic_vector(6 downto 0);
    units_out : out std_logic_vector(3 downto 0);
    tens_out : out std_logic_vector(3 downto 0);
    hundreds_out : out std_logic_vector(3 downto 0)
  );
end entity number_splitter;

architecture behavior of number_splitter is
  signal num : integer;
begin
  num &lt;= to_integer(unsigned(num_in));
  units_out &lt;= std_logic_vector(to_unsigned(num mod 10, 4));
  tens_out &lt;= std_logic_vector(to_unsigned(num / 10 mod 10, 4));
  hundreds_out &lt;= std_logic_vector(to_unsigned(num / 100 mod 10, 4));
end architecture behavior;
</vhdl>
  <vhdl name="introduce_money">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity introduce_money is
    port (
        cost        : in  std_logic_vector(6 downto 0);
        button      : in  std_logic;
        addr        : in  std_logic_vector(2 downto 0);
        suma_data   : out std_logic_vector(6 downto 0);
        suma_ceruta : out std_logic_vector(6 downto 0);
        ok          : out std_logic --cand am ajuns la suma ceruta, trecem la acordarea restului
    );
end entity introduce_money;

architecture rtl of introduce_money is
    signal suma_ceruta_int : integer := 0;
    signal introdus_semnal : integer := 0;
    
begin
    suma_ceruta_int &lt;= to_integer(unsigned(cost));
    suma_ceruta &lt;= cost;
    process(button)
        variable introdus : integer := introdus_semnal;
    begin
        if rising_edge(button) then
            case addr is
                when "000" =&gt;
                    introdus := introdus + 1;
                when "001" =&gt;
                    introdus := introdus + 2;
                when "010" =&gt;
                    introdus := introdus + 5;
                when "011" =&gt;
                    introdus := introdus + 10;
                when "100" =&gt;
                    introdus := introdus + 20;
                when "101" =&gt;
                    introdus := introdus + 50;
                when others =&gt;
                    null;
            end case;
            
            if introdus &gt;= suma_ceruta_int then
                suma_data &lt;= std_logic_vector(to_unsigned(introdus, 7));
                ok &lt;= '1';
            else
            	 ok &lt;= '0';
            end if;
            
            introdus_semnal &lt;= introdus;
        end if;
        
        suma_data &lt;= std_logic_vector(to_unsigned(introdus, 7));
    end process;

end architecture rtl;
</vhdl>
  <vhdl name="calculate_rest">LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;
ENTITY calculate_rest IS
  PORT (
    suma_data   : in std_logic_vector(6 downto 0);
    suma_ceruta : in std_logic_vector(6 downto 0);
    ok          : in std_logic;
    rest        : out std_logic_vector(6 downto 0);
    ok2         : out std_logic;
    error       : out std_logic
    );
END calculate_rest;

ARCHITECTURE TypeArchitecture OF calculate_rest IS
  signal rest_int        : integer;
  signal suma_data_int   : integer;
  signal suma_ceruta_int : integer;
BEGIN
  ok2 &lt;= ok;
  process(ok)
  begin
  if ok ='1' then
    error           &lt;= '0';
    rest &lt;= suma_data-suma_ceruta;
   else
	error &lt;= '1';
   end if;
  end process;
  
END TypeArchitecture;</vhdl>
  <vhdl name="procesare_rest">LIBRARY ieee;
USE ieee.std_logic_1164.all;

use ieee.numeric_std.all;

ENTITY procesare_rest IS
  PORT (
  	rest   : in std_logic_vector(6 downto 0);
  	ok     : in std_logic;
  	unu    : out std_logic_vector(6 downto 0);
  	doi    : out std_logic_vector(6 downto 0);
  	cinci  : out std_logic_vector(6 downto 0);
  	zece   : out std_logic_vector(6 downto 0);
  	dzeci  : out std_logic_vector(6 downto 0);
  	czeci  : out std_logic_vector(6 downto 0);
  	ok2    : out std_logic
    );
END procesare_rest;
            
ARCHITECTURE TypeArchitecture OF procesare_rest IS
	signal left : natural :=0 ;
BEGIN
	ok2 &lt;= ok;
     left &lt;= to_integer(unsigned(rest));

	process(ok,left)
     variable ramas : natural;
     variable unu_int : natural := 0;
     variable doi_int : natural := 0;
     variable cinci_int : natural := 0;
     variable zece_int : natural := 0;
     variable dzeci_int : natural := 0;
     variable czeci_int : natural := 0;
	begin
		if ok = '1' then
		ramas := left;
		czeci_int:=ramas/50;
		czeci&lt;=std_logic_vector(to_unsigned(czeci_int,7));
		ramas:=ramas-czeci_int*50;
		dzeci_int:=ramas/20;
		dzeci&lt;=std_logic_vector(to_unsigned(dzeci_int,7));
		ramas:=ramas-dzeci_int*20;
		zece_int:=ramas/10;
		zece&lt;=std_logic_vector(to_unsigned(zece_int,7));
		ramas:=ramas-zece_int*10;
		cinci_int:=ramas/5;
		cinci&lt;=std_logic_vector(to_unsigned(cinci_int,7));
		ramas:=ramas-cinci_int*5;
		doi_int:=ramas/2;
		doi&lt;=std_logic_vector(to_unsigned(doi_int,7));
		ramas:=ramas-doi_int*2;
		unu_int:=ramas;
		unu&lt;=std_logic_vector(to_unsigned(unu_int,7));
		end if;
	end process;
	
END TypeArchitecture;</vhdl>
  <vhdl name="memory_tickets">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity memory_tickets is
    port (
    button           : in std_logic;
    numar_bilete 	  : in std_logic_vector(6 downto 0);
    ok 			  : in std_logic;
    numar_bilete_out : out std_logic_vector(6 downto 0);
    error            : out std_logic
    );
end entity memory_tickets;

architecture Behavioral of memory_tickets is
    signal nr_bilete : unsigned(6 downto 0);
begin
    process (button,ok)
    begin
    if rising_edge(button) then
        if ok = '1' then
        	if unsigned(numar_bilete) &gt; 0 then
            nr_bilete &lt;= unsigned(numar_bilete) - 1;
            error &lt;= '0';
          else
           error &lt;= '1';
          end if;
        else
        	  nr_bilete &lt;= unsigned(numar_bilete);
        end if;
     end if;
    end process;

    numar_bilete_out &lt;= std_logic_vector(nr_bilete);
end architecture Behavioral;
</vhdl>
  <vhdl name="hex_7seg">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY hex_7seg IS

  PORT (
 		hex_in: in std_logic_vector(3 downto 0);
  		a_b_c_d_e_f_g: out std_logic_vector(6 downto 0)
  		);

END hex_7seg;

ARCHITECTURE arch_hex OF hex_7seg IS

BEGIN

	a_b_c_d_e_f_g &lt;= "1111110" when hex_in= x"0" else
				  "0110000" when hex_in= x"1" else
				  "1101101" when hex_in= x"2" else
				  "1111001" when hex_in= x"3" else
				  "0110011" when hex_in= x"4" else
				  "1011011" when hex_in= x"5" else
				  "1011111" when hex_in= x"6" else
				  "1110000" when hex_in= x"7" else
				  "1111111" when hex_in= x"8" else
				  "1111011" when hex_in= x"9" else
				  "1110111" when hex_in= x"A" else
				  "0011111" when hex_in= x"B" else
				  "1001110" when hex_in= x"C" else
				  "0111101" when hex_in= x"d" else
				  "1001111" when hex_in= x"E" else
				  "0000001" when hex_in= x"F" else
				  "0000000";

END arch_hex;</vhdl>
</project>
